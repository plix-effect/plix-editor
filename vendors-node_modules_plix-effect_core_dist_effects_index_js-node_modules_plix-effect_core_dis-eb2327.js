(self["webpackChunk_plix_effect_editor"] = self["webpackChunk_plix_effect_editor"] || []).push([["vendors-node_modules_plix-effect_core_dist_effects_index_js-node_modules_plix-effect_core_dis-eb2327"],{

/***/ "./node_modules/@plix-effect/core/dist/Color.js":
/*!******************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/Color.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TRANSPARENT_WHITE = exports.WHITE = exports.TRANSPARENT_BLACK = exports.BLACK = exports.hslaToRgba = exports.rgbaToHsla = exports.shade = exports.addHue = exports.applyOpacityToHslaOrRgba = exports.numberToRgba = exports.rgbaToNumber = exports.applyOpacity = exports.blendColors = exports.fromHsla = exports.toHsla = exports.fromRgba = exports.toRgba = exports.fromNumber = exports.toNumber = exports.PlixColor = void 0;
var posMod_1 = __webpack_require__(/*! ./util/posMod */ "./node_modules/@plix-effect/core/dist/util/posMod.js");
var limit_1 = __webpack_require__(/*! ./util/limit */ "./node_modules/@plix-effect/core/dist/util/limit.js");
var PlixColor = /** @class */ (function () {
    function PlixColor(data) {
        if (typeof data === "number")
            return exports.fromNumber(data);
        if ("h" in data)
            return exports.fromHsla(data);
        if ("r" in data)
            return exports.fromRgba(data);
        // todo: add parse-string (name, hash-value)
        throw new Error("wrong color format: " + JSON.stringify(data));
    }
    return PlixColor;
}());
exports.PlixColor = PlixColor;
exports.toNumber = function (color) {
    return exports.rgbaToNumber(exports.toRgba(color));
};
exports.fromNumber = function (color) {
    return exports.numberToRgba(color);
};
exports.toRgba = function (color) {
    return color;
};
exports.fromRgba = function (color) {
    if ("a" in color)
        return color;
    return __assign(__assign({}, color), { a: 1 });
};
exports.toHsla = function (color) {
    return rgbaToHsla(color);
};
exports.fromHsla = function (color) {
    if ("a" in color)
        return hslaToRgba(color);
    return hslaToRgba(__assign(__assign({}, color), { a: 1 }));
};
exports.blendColors = function (x, y, blend) {
    var xc = exports.toRgba(x);
    var yc = exports.toRgba(y);
    var z = blend(xc, yc); // r,g,b can be NaN. need to fix it
    return exports.fromRgba({ r: z.r || 0, g: z.g || 0, b: z.b || 0, a: z.a });
};
exports.applyOpacity = function (color, gain) {
    return exports.applyOpacityToHslaOrRgba(color, gain);
};
exports.rgbaToNumber = function (_a) {
    var r = _a.r, g = _a.g, b = _a.b, a = _a.a;
    return (r << 24) | (g << 16) | (b << 8) | (a * 255);
};
exports.numberToRgba = function (color) {
    return {
        r: (color >>> 24) & 0xFF,
        g: (color >>> 16) & 0xFF,
        b: (color >>> 8) & 0xFF,
        a: (color >>> 0 & 0xFF) / 255
    };
};
exports.applyOpacityToHslaOrRgba = function (color, gain) {
    return __assign(__assign({}, color), { a: limit_1.default(0, gain * color.a, 1) });
};
exports.addHue = function (color, value) {
    var _a = exports.toHsla(color), h = _a.h, s = _a.s, l = _a.l, a = _a.a;
    return exports.fromHsla({ h: posMod_1.default(h + value, 1), s: s, l: l, a: a });
};
exports.shade = function (colorA, colorB, stage) {
    var x = colorA;
    var y = colorB;
    // shade absolutely transparent colors
    if (y.a === 0)
        y = __assign(__assign({}, x), { a: 0 });
    if (x.a === 0)
        x = __assign(__assign({}, y), { a: 0 });
    var dr = (y.r - x.r);
    var dg = (y.g - x.g);
    var db = (y.b - x.b);
    var da = (y.a - x.a);
    return {
        r: limit_1.default(0, (x.r + dr * stage) | 0, 255),
        g: limit_1.default(0, (x.g + dg * stage) | 0, 255),
        b: limit_1.default(0, (x.b + db * stage) | 0, 255),
        a: limit_1.default(0, x.a + da * stage, 1),
    };
};
/**
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and l in the set [0, 1].
 */
function rgbaToHsla(_a) {
    var r = _a.r, g = _a.g, b = _a.b, a = _a.a;
    r /= 255;
    g /= 255;
    b /= 255;
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2;
    if (max === min) {
        h = s = 0; // achromatic
    }
    else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return { h: h, s: s, l: l, a: a };
}
exports.rgbaToHsla = rgbaToHsla;
/**
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 */
function hslaToRgba(_a) {
    var h = _a.h, s = _a.s, l = _a.l, a = _a.a;
    var r, g, b;
    if (s === 0) {
        r = g = b = l; // achromatic
    }
    else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }
    return { r: (r * 255) | 0, g: (g * 255) | 0, b: (b * 255) | 0, a: a };
}
exports.hslaToRgba = hslaToRgba;
function hue2rgb(p, q, t) {
    if (t < 0)
        t += 1;
    if (t > 1)
        t -= 1;
    if (t < 1 / 6)
        return p + (q - p) * 6 * t;
    if (t < 1 / 2)
        return q;
    if (t < 2 / 3)
        return p + (q - p) * (2 / 3 - t) * 6;
    return p;
}
exports.BLACK = exports.fromRgba({ r: 0, g: 0, b: 0, a: 1 });
exports.TRANSPARENT_BLACK = exports.fromRgba({ r: 0, g: 0, b: 0, a: 0 });
exports.WHITE = exports.fromRgba({ r: 255, g: 255, b: 255, a: 1 });
exports.TRANSPARENT_WHITE = exports.fromRgba({ r: 255, g: 255, b: 255, a: 0 });
//# sourceMappingURL=Color.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/effects/AddHue.js":
/*!***************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/effects/AddHue.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseTypes_1 = __webpack_require__(/*! ../parser/parseTypes */ "./node_modules/@plix-effect/core/dist/parser/parseTypes.js");
var Color_1 = __webpack_require__(/*! ../Color */ "./node_modules/@plix-effect/core/dist/Color.js");
AddHue.meta = {
    name: "AddHue",
    description: "Add Hue to every pixel",
    paramNames: ["timing"],
    paramTypes: ["timing"],
    paramDescriptions: ["calculate the added value"],
    defaultValues: [["linear", 0, 1]],
    paramParse: [parseTypes_1.TIMING_FUNCTION]
};
function AddHue(t) {
    return function (time, dur) { return function () { return function (color) {
        return Color_1.addHue(color, t(time / dur));
    }; }; };
}
exports.default = AddHue;
;
//# sourceMappingURL=AddHue.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/effects/Chain.js":
/*!**************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/effects/Chain.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseTypes_1 = __webpack_require__(/*! ../parser/parseTypes */ "./node_modules/@plix-effect/core/dist/parser/parseTypes.js");
Chain.meta = {
    name: "Chain",
    description: "Apply effects one by one to same pixels",
    paramNames: ["effects"],
    paramTypes: ["array:effect"],
    paramDescriptions: ["list of effects"],
    defaultValues: [[]],
    paramParse: [parseTypes_1.ARRAY_OF(parseTypes_1.EFFECT)]
};
function Chain(effects) {
    return function (time, duration, startFrom) {
        var lineModifiers = []; //
        for (var _i = 0, effects_1 = effects; _i < effects_1.length; _i++) {
            var effect = effects_1[_i];
            lineModifiers.push(effect(time, duration, startFrom));
        }
        return function (index, length) {
            var colorModifiers = []; //
            for (var _i = 0, lineModifiers_1 = lineModifiers; _i < lineModifiers_1.length; _i++) {
                var lineModifier = lineModifiers_1[_i];
                colorModifiers.push(lineModifier(index, length));
            }
            return function (color) {
                var currentColor = color;
                for (var _i = 0, colorModifiers_1 = colorModifiers; _i < colorModifiers_1.length; _i++) {
                    var colorModifier = colorModifiers_1[_i];
                    currentColor = colorModifier(currentColor);
                }
                return currentColor;
            };
        };
    };
}
exports.default = Chain;
//# sourceMappingURL=Chain.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/effects/Fill.js":
/*!*************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/effects/Fill.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseTypes_1 = __webpack_require__(/*! ../parser/parseTypes */ "./node_modules/@plix-effect/core/dist/parser/parseTypes.js");
var utils_1 = __webpack_require__(/*! ./utils */ "./node_modules/@plix-effect/core/dist/effects/utils.js");
Fill.meta = {
    name: "Fill",
    description: "Fill pixels by selected color",
    paramNames: ["color"],
    paramTypes: ["color"],
    paramDescriptions: ["color"],
    defaultValues: [0xff800000 | 0],
    paramParse: [parseTypes_1.COLOR]
};
function Fill(color) {
    return function () { return utils_1.FillLine(color); };
}
exports.default = Fill;
//# sourceMappingURL=Fill.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/effects/Gradient.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/effects/Gradient.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseTypes_1 = __webpack_require__(/*! ../parser/parseTypes */ "./node_modules/@plix-effect/core/dist/parser/parseTypes.js");
var utils_1 = __webpack_require__(/*! ./utils */ "./node_modules/@plix-effect/core/dist/effects/utils.js");
Gradient.meta = {
    name: "Gradient",
    description: "Fill pixels by gradient",
    paramNames: ["gradient"],
    paramTypes: ["gradient"],
    paramDescriptions: ["gradient"],
    defaultValues: [[[0.2, 0xff8000ff | 0], [0.8, 0x0080ff80 | 0]]],
    paramParse: [parseTypes_1.GRADIENT]
};
function Gradient(gradient) {
    return function () { return utils_1.FillGradient(gradient); };
}
exports.default = Gradient;
//# sourceMappingURL=Gradient.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/effects/Paint.js":
/*!**************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/effects/Paint.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseTypes_1 = __webpack_require__(/*! ../parser/parseTypes */ "./node_modules/@plix-effect/core/dist/parser/parseTypes.js");
Paint.meta = {
    name: "Paint",
    description: "Paint, set color for every pixel",
    paramNames: ["colors"],
    paramTypes: ["array:color"],
    paramDescriptions: ["color"],
    defaultValues: [[]],
    paramParse: [parseTypes_1.ARRAY_OF(parseTypes_1.COLOR)]
};
function Paint(colors) {
    return function () { return function (index) {
        var paintColor = colors[index | 0 /*floor(index)*/];
        return function (color) { return paintColor !== null && paintColor !== void 0 ? paintColor : color; };
    }; };
}
exports.default = Paint;
//# sourceMappingURL=Paint.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/effects/Rainbow.js":
/*!****************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/effects/Rainbow.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseTypes_1 = __webpack_require__(/*! ../parser/parseTypes */ "./node_modules/@plix-effect/core/dist/parser/parseTypes.js");
var Transpose_1 = __webpack_require__(/*! ../filters/Transpose */ "./node_modules/@plix-effect/core/dist/filters/Transpose.js");
var AddHue_1 = __webpack_require__(/*! ./AddHue */ "./node_modules/@plix-effect/core/dist/effects/AddHue.js");
Rainbow.meta = {
    name: "Rainbow",
    description: "Fill non-black pixels with R-G-B rainbow. Use with Chain",
    paramNames: ["timing"],
    paramTypes: ["timing"],
    paramDescriptions: ["shift pixel hue on this value. Use Fill with linear function to get rainbow effect"],
    defaultValues: [["linear", 0, 1]],
    paramParse: [parseTypes_1.TIMING_FUNCTION]
};
function Rainbow(t) {
    return Transpose_1.transpose(AddHue_1.default(t));
}
exports.default = Rainbow;
;
//# sourceMappingURL=Rainbow.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/effects/Timeline.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/effects/Timeline.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TIMELINE_LCM = void 0;
var parseTypes_1 = __webpack_require__(/*! ../parser/parseTypes */ "./node_modules/@plix-effect/core/dist/parser/parseTypes.js");
var utils_1 = __webpack_require__(/*! ./utils */ "./node_modules/@plix-effect/core/dist/effects/utils.js");
exports.TIMELINE_LCM = 3360;
var MINUTE = 60000;
Timeline.meta = {
    name: "Timeline",
    description: "Play effects on fixed timeline",
    paramNames: ["records", "bpm", "grid", "offset", "repeat start", "repeat end"],
    paramTypes: ["array:record", "number", "grid", "number", "number", "number"],
    paramDescriptions: ["list of effects in timeline (effect, start time, duration)", "beats per minute", "number of grid divisions", "offset from start in ms.", "start beat position for repeat", "end position for repeat. 0 = no-repeat"],
    defaultValues: [[], 120, 4, 0, 0, 0],
    paramParse: [parseTypes_1.ARRAY_OF(parseTypes_1.TIME_EFFECT_RECORD), parseTypes_1.NUMBER, parseTypes_1.NUMBER, parseTypes_1.NUMBER, parseTypes_1.NUMBER, parseTypes_1.NUMBER]
};
function Timeline(effectRecords, bpm, grid, offset, repeatStart, repeatEnd) {
    if (repeatEnd !== 0 && repeatStart >= repeatEnd)
        throw new Error("wrong Timeline repeat position: from " + repeatStart + " to " + repeatEnd);
    var beatDuration = MINUTE / bpm;
    var toTimeRecord = timeRecordConverter(beatDuration, offset);
    var repeatStartTime = offset + beatDuration * repeatStart;
    var repeatEndTime = offset + beatDuration * repeatEnd;
    var repeatDuration = repeatEndTime - repeatStartTime;
    var timeRecords = effectRecords.map(toTimeRecord).sort(function (recA, recB) {
        if (recA.start > recB.start)
            return 1;
        if (recA.start < recB.start)
            return -1;
        return 0;
    });
    return function (time, _, startFrom) {
        if (startFrom === void 0) { startFrom = 0; }
        if (repeatEnd > 0)
            time = time + startFrom;
        if (repeatEnd > 0 && time > repeatStartTime) {
            time = repeatStartTime + (time - repeatStartTime) % repeatDuration;
            startFrom = repeatStartTime;
        }
        var lastRecord = getLastRecord(timeRecords, time);
        if (!lastRecord)
            return utils_1.EmptyLine;
        var start = lastRecord.start, duration = lastRecord.duration, effect = lastRecord.effect;
        if (start + duration <= time)
            return utils_1.EmptyLine;
        return effect(time - start, duration, startFrom + start);
    };
}
exports.default = Timeline;
var timeRecordConverter = function (beatDuration, offset) {
    var lcmDuration = beatDuration;
    return function (rec) {
        return {
            start: offset + rec.startM * lcmDuration / exports.TIMELINE_LCM,
            duration: (rec.endM - rec.startM) * lcmDuration / exports.TIMELINE_LCM,
            effect: rec.effect
        };
    };
};
function getLastRecord(records, time) {
    for (var i = records.length - 1; i >= 0; i--) {
        var record = records[i];
        if (record.start <= time)
            return record;
    }
}
//# sourceMappingURL=Timeline.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/effects/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/effects/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var AddHue_1 = __webpack_require__(/*! ./AddHue */ "./node_modules/@plix-effect/core/dist/effects/AddHue.js");
Object.defineProperty(exports, "AddHue", ({ enumerable: true, get: function () { return AddHue_1.default; } }));
var Chain_1 = __webpack_require__(/*! ./Chain */ "./node_modules/@plix-effect/core/dist/effects/Chain.js");
Object.defineProperty(exports, "Chain", ({ enumerable: true, get: function () { return Chain_1.default; } }));
var Gradient_1 = __webpack_require__(/*! ./Gradient */ "./node_modules/@plix-effect/core/dist/effects/Gradient.js");
Object.defineProperty(exports, "Gradient", ({ enumerable: true, get: function () { return Gradient_1.default; } }));
var Fill_1 = __webpack_require__(/*! ./Fill */ "./node_modules/@plix-effect/core/dist/effects/Fill.js");
Object.defineProperty(exports, "Fill", ({ enumerable: true, get: function () { return Fill_1.default; } }));
var Paint_1 = __webpack_require__(/*! ./Paint */ "./node_modules/@plix-effect/core/dist/effects/Paint.js");
Object.defineProperty(exports, "Paint", ({ enumerable: true, get: function () { return Paint_1.default; } }));
var Rainbow_1 = __webpack_require__(/*! ./Rainbow */ "./node_modules/@plix-effect/core/dist/effects/Rainbow.js");
Object.defineProperty(exports, "Rainbow", ({ enumerable: true, get: function () { return Rainbow_1.default; } }));
var Timeline_1 = __webpack_require__(/*! ./Timeline */ "./node_modules/@plix-effect/core/dist/effects/Timeline.js");
Object.defineProperty(exports, "Timeline", ({ enumerable: true, get: function () { return Timeline_1.default; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/effects/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/effects/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FillGradient = exports.FillLine = exports.FillColor = exports.EmptyFilter = exports.EmptyEffect = exports.EmptyLine = exports.EmptyMod = void 0;
exports.EmptyMod = function (color) { return color; };
exports.EmptyLine = function () { return exports.EmptyMod; };
exports.EmptyEffect = function () { return exports.EmptyLine; };
exports.EmptyFilter = function (e) { return e; };
exports.FillColor = function (color) { return function () { return color; }; };
exports.FillLine = function (color) { return function () { return exports.FillColor(color); }; };
exports.FillGradient = function (gradient) { return function (index, length) { return exports.FillColor(gradient(index / length)); }; };
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/filters/Blend.js":
/*!**************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/filters/Blend.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseTypes_1 = __webpack_require__(/*! ../parser/parseTypes */ "./node_modules/@plix-effect/core/dist/parser/parseTypes.js");
var Color_1 = __webpack_require__(/*! ../Color */ "./node_modules/@plix-effect/core/dist/Color.js");
Blend.meta = {
    name: "Blend",
    description: "Blend effect",
    paramNames: ["opacity", "mode"],
    paramTypes: ["number", "blend"],
    paramParse: [parseTypes_1.NUMBER, parseTypes_1.BLENDER],
    paramDescriptions: ["apply opacity to effect", "select blending mode"],
    defaultValues: [1, "normal"]
};
function Blend(opacity, blender) {
    return function (effect) { return function (time, dur, startFrom) {
        var lineMod = effect(time, dur, startFrom);
        return function (index, length) {
            var colorMod = lineMod(index, length);
            return function (color) {
                var effectColor = colorMod(Color_1.TRANSPARENT_BLACK);
                var opaEffectColor = Color_1.applyOpacity(effectColor, opacity);
                return Color_1.blendColors(color, opaEffectColor, blender);
            };
        };
    }; };
}
exports.default = Blend;
//# sourceMappingURL=Blend.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/filters/BlendFilters.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/filters/BlendFilters.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseTypes_1 = __webpack_require__(/*! ../parser/parseTypes */ "./node_modules/@plix-effect/core/dist/parser/parseTypes.js");
var Blend_1 = __webpack_require__(/*! ./Blend */ "./node_modules/@plix-effect/core/dist/filters/Blend.js");
var Chain_1 = __webpack_require__(/*! ../effects/Chain */ "./node_modules/@plix-effect/core/dist/effects/Chain.js");
var color_blend_1 = __webpack_require__(/*! color-blend */ "./node_modules/color-blend/dist/index.modern.js");
BlendFilters.meta = {
    name: "BlendFilters",
    description: "Apply filters in parallel and blend results",
    paramNames: ["filters"],
    paramTypes: ["array:filter"],
    paramParse: [parseTypes_1.ARRAY_OF(parseTypes_1.FILTER)],
    paramDescriptions: ["list of filters"],
    defaultValues: [[]]
};
var blendNormal = Blend_1.default(1, color_blend_1.normal);
function BlendFilters(filters) {
    return function (effect) {
        var results = [];
        for (var _i = 0, filters_1 = filters; _i < filters_1.length; _i++) {
            var filter = filters_1[_i];
            results.push(blendNormal(filter(effect)));
        }
        return Chain_1.default(results);
    };
}
exports.default = BlendFilters;
//# sourceMappingURL=BlendFilters.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/filters/FChain.js":
/*!***************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/filters/FChain.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseTypes_1 = __webpack_require__(/*! ../parser/parseTypes */ "./node_modules/@plix-effect/core/dist/parser/parseTypes.js");
FChain.meta = {
    name: "FChain",
    description: "Apply filters one by one",
    paramNames: ["filters"],
    paramTypes: ["array:filter"],
    paramParse: [parseTypes_1.ARRAY_OF(parseTypes_1.FILTER)],
    paramDescriptions: ["list of filters"],
    defaultValues: [[]]
};
function FChain(filters) {
    return function (effect) {
        var currentEffect = effect;
        for (var _i = 0, filters_1 = filters; _i < filters_1.length; _i++) {
            var filter = filters_1[_i];
            currentEffect = filter(currentEffect);
        }
        return currentEffect;
    };
}
exports.default = FChain;
//# sourceMappingURL=FChain.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/filters/OuterBorder.js":
/*!********************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/filters/OuterBorder.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseTypes_1 = __webpack_require__(/*! ../parser/parseTypes */ "./node_modules/@plix-effect/core/dist/parser/parseTypes.js");
var utils_1 = __webpack_require__(/*! ../effects/utils */ "./node_modules/@plix-effect/core/dist/effects/utils.js");
OuterColor.meta = {
    name: "OuterBorder",
    description: "add outer border pixels to effect",
    paramNames: ["color", "width"],
    paramTypes: ["color", "number"],
    paramParse: [parseTypes_1.COLOR, parseTypes_1.NUMBER],
    paramDescriptions: ["add outer border to effect"],
    defaultValues: [0x80ff2080 | 0, 1]
};
function OuterColor(color, borderWidth) {
    return function (effect) { return function (time, dur, startFrom) {
        var lineMod = effect(time, dur, startFrom);
        return function (index, length) {
            if (index < borderWidth || index >= length - borderWidth) {
                return utils_1.FillColor(color);
            }
            var innerIndex = (index - borderWidth) * length / (length - borderWidth - borderWidth);
            return lineMod(innerIndex, length);
        };
    }; };
}
exports.default = OuterColor;
//# sourceMappingURL=OuterBorder.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/filters/Playback.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/filters/Playback.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseTypes_1 = __webpack_require__(/*! ../parser/parseTypes */ "./node_modules/@plix-effect/core/dist/parser/parseTypes.js");
var utils_1 = __webpack_require__(/*! ../effects/utils */ "./node_modules/@plix-effect/core/dist/effects/utils.js");
Playback.meta = {
    name: "Playback",
    description: "Play effect with changed speed and at specified time",
    paramNames: ["speed", "startPos"],
    paramTypes: ["timing", "timing"],
    paramDescriptions: ["new effect speed", "start time"],
    defaultValues: [1, 0, null],
    paramParse: [parseTypes_1.TIMING_FUNCTION, parseTypes_1.TIMING_FUNCTION]
};
function Playback(speedF, startF) {
    return function (effect) { return function (time, dur, startFrom) {
        var div = time / dur;
        var speed = speedF(div);
        var start = startF(div);
        var modTime = (time - start * dur) * speed;
        if (modTime < 0 || modTime >= dur)
            return utils_1.EmptyLine;
        return effect(modTime, dur, startFrom);
    }; };
}
exports.default = Playback;
//# sourceMappingURL=Playback.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/filters/Position.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/filters/Position.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseTypes_1 = __webpack_require__(/*! ../parser/parseTypes */ "./node_modules/@plix-effect/core/dist/parser/parseTypes.js");
var utils_1 = __webpack_require__(/*! ../effects/utils */ "./node_modules/@plix-effect/core/dist/effects/utils.js");
Position.meta = {
    name: "Position",
    description: "Position effect",
    paramNames: ["position"],
    paramTypes: ["position"],
    paramDescriptions: ["map positions"],
    paramParse: [parseTypes_1.POSITION],
    defaultValues: [[]]
};
function Position(positions) {
    var innerLength = positions.length;
    return function (effect) { return function (time, duration, startFrom) {
        return function (index) {
            var floorIndex = Math.floor(index);
            var innerIndex = positions.findIndex(function (pos) {
                if (typeof pos === "number")
                    return pos === floorIndex;
                return pos.includes(floorIndex);
            });
            if (innerIndex >= 0)
                return effect(time, duration, startFrom)(innerIndex, innerLength);
            return utils_1.EmptyMod;
        };
    }; };
}
exports.default = Position;
//# sourceMappingURL=Position.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/filters/Transpose.js":
/*!******************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/filters/Transpose.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.transpose = void 0;
Transpose.meta = {
    name: "Transpose",
    description: "Transpose effect (swap time and x coordinates)",
    paramNames: [],
    paramTypes: [],
    paramDescriptions: [],
    defaultValues: [],
    paramParse: [],
};
exports.transpose = function (effect) { return function (time, dur) { return function (index, len) {
    return effect(index / len * dur, dur)(time / dur * len, len);
}; }; };
function Transpose() {
    return exports.transpose;
}
exports.default = Transpose;
;
//# sourceMappingURL=Transpose.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/filters/Zoom.js":
/*!*************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/filters/Zoom.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseTypes_1 = __webpack_require__(/*! ../parser/parseTypes */ "./node_modules/@plix-effect/core/dist/parser/parseTypes.js");
var utils_1 = __webpack_require__(/*! ../effects/utils */ "./node_modules/@plix-effect/core/dist/effects/utils.js");
Zoom.meta = {
    name: "Zoom",
    description: "Zoom pixels and change position",
    paramNames: ["zoom", "offset"],
    paramTypes: ["timing", "timing"],
    paramDescriptions: ["zoom value or timing function", "offset value or timing function"],
    defaultValues: [1, 0],
    paramParse: [parseTypes_1.TIMING_FUNCTION, parseTypes_1.TIMING_FUNCTION]
};
function Zoom(zoomF, offsetF) {
    return function (effect) { return function (time, dur, startFrom) {
        var div = time / dur;
        var zoom = zoomF(div);
        var offset = offsetF(div);
        var lineMod = effect(time, dur, startFrom);
        return function (index, length) {
            var modPos = (index - offset * length) / zoom;
            if (modPos < 0 || modPos >= length)
                return utils_1.EmptyMod;
            return lineMod(modPos, length);
        };
    }; };
}
exports.default = Zoom;
//# sourceMappingURL=Zoom.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/filters/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/filters/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Blend_1 = __webpack_require__(/*! ./Blend */ "./node_modules/@plix-effect/core/dist/filters/Blend.js");
Object.defineProperty(exports, "Blend", ({ enumerable: true, get: function () { return Blend_1.default; } }));
var BlendFilters_1 = __webpack_require__(/*! ./BlendFilters */ "./node_modules/@plix-effect/core/dist/filters/BlendFilters.js");
Object.defineProperty(exports, "BlendFilters", ({ enumerable: true, get: function () { return BlendFilters_1.default; } }));
var FChain_1 = __webpack_require__(/*! ./FChain */ "./node_modules/@plix-effect/core/dist/filters/FChain.js");
Object.defineProperty(exports, "FChain", ({ enumerable: true, get: function () { return FChain_1.default; } }));
var OuterBorder_1 = __webpack_require__(/*! ./OuterBorder */ "./node_modules/@plix-effect/core/dist/filters/OuterBorder.js");
Object.defineProperty(exports, "OuterBorder", ({ enumerable: true, get: function () { return OuterBorder_1.default; } }));
var Playback_1 = __webpack_require__(/*! ./Playback */ "./node_modules/@plix-effect/core/dist/filters/Playback.js");
Object.defineProperty(exports, "Playback", ({ enumerable: true, get: function () { return Playback_1.default; } }));
var Position_1 = __webpack_require__(/*! ./Position */ "./node_modules/@plix-effect/core/dist/filters/Position.js");
Object.defineProperty(exports, "Position", ({ enumerable: true, get: function () { return Position_1.default; } }));
var Transpose_1 = __webpack_require__(/*! ./Transpose */ "./node_modules/@plix-effect/core/dist/filters/Transpose.js");
Object.defineProperty(exports, "Transpose", ({ enumerable: true, get: function () { return Transpose_1.default; } }));
var Zoom_1 = __webpack_require__(/*! ./Zoom */ "./node_modules/@plix-effect/core/dist/filters/Zoom.js");
Object.defineProperty(exports, "Zoom", ({ enumerable: true, get: function () { return Zoom_1.default; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/gradient/LinearGradient.js":
/*!************************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/gradient/LinearGradient.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LinearGradient = void 0;
var Color_1 = __webpack_require__(/*! ../Color */ "./node_modules/@plix-effect/core/dist/Color.js");
function LinearGradient(colorPositions) {
    var lineColorPositions = __spreadArrays(__spreadArrays(colorPositions).sort(function (_a, _b) {
        var p1 = _a.position;
        var p2 = _b.position;
        if (p1 > p2)
            return 1;
        if (p1 < p2)
            return -1;
        return 0;
    }), [null]);
    return function (t) {
        var _a;
        var leftCP = null;
        var rightCP = null;
        for (var _i = 0, lineColorPositions_1 = lineColorPositions; _i < lineColorPositions_1.length; _i++) {
            var colorPos = lineColorPositions_1[_i];
            _a = [rightCP, colorPos], leftCP = _a[0], rightCP = _a[1];
            if (colorPos && colorPos.position >= t)
                break;
        }
        if (leftCP && rightCP) {
            var stage = (t - leftCP.position) / (rightCP.position - leftCP.position);
            return Color_1.shade(leftCP.color, rightCP.color, stage);
        }
        if (rightCP)
            return rightCP.color;
        if (leftCP)
            return leftCP.color;
        return Color_1.TRANSPARENT_BLACK;
    };
}
exports.LinearGradient = LinearGradient;
//# sourceMappingURL=LinearGradient.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/parser/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/parser/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseEffect_1 = __webpack_require__(/*! ./parseEffect */ "./node_modules/@plix-effect/core/dist/parser/parseEffect.js");
var parseFilter_1 = __webpack_require__(/*! ./parseFilter */ "./node_modules/@plix-effect/core/dist/parser/parseFilter.js");
var parseGradient_1 = __webpack_require__(/*! ./parseGradient */ "./node_modules/@plix-effect/core/dist/parser/parseGradient.js");
Object.defineProperty(exports, "parseGradient", ({ enumerable: true, get: function () { return parseGradient_1.default; } }));
var parseFilter_2 = __webpack_require__(/*! ./parseFilter */ "./node_modules/@plix-effect/core/dist/parser/parseFilter.js");
Object.defineProperty(exports, "parseFilter", ({ enumerable: true, get: function () { return parseFilter_2.default; } }));
var parsePosition_1 = __webpack_require__(/*! ./parsePosition */ "./node_modules/@plix-effect/core/dist/parser/parsePosition.js");
Object.defineProperty(exports, "parsePosition", ({ enumerable: true, get: function () { return parsePosition_1.default; } }));
var parseBlender_1 = __webpack_require__(/*! ./parseBlender */ "./node_modules/@plix-effect/core/dist/parser/parseBlender.js");
Object.defineProperty(exports, "parseBlender", ({ enumerable: true, get: function () { return parseBlender_1.default; } }));
var parseNumber_1 = __webpack_require__(/*! ./parseNumber */ "./node_modules/@plix-effect/core/dist/parser/parseNumber.js");
Object.defineProperty(exports, "parseNumber", ({ enumerable: true, get: function () { return parseNumber_1.default; } }));
var parseTimingFunction_1 = __webpack_require__(/*! ./parseTimingFunction */ "./node_modules/@plix-effect/core/dist/parser/parseTimingFunction.js");
Object.defineProperty(exports, "parseTimingFunction", ({ enumerable: true, get: function () { return parseTimingFunction_1.default; } }));
var parseArray_1 = __webpack_require__(/*! ./parseArray */ "./node_modules/@plix-effect/core/dist/parser/parseArray.js");
Object.defineProperty(exports, "parseArray", ({ enumerable: true, get: function () { return parseArray_1.default; } }));
var parseColor_1 = __webpack_require__(/*! ./parseColor */ "./node_modules/@plix-effect/core/dist/parser/parseColor.js");
Object.defineProperty(exports, "parseColor", ({ enumerable: true, get: function () { return parseColor_1.default; } }));
var parseEffect_2 = __webpack_require__(/*! ./parseEffect */ "./node_modules/@plix-effect/core/dist/parser/parseEffect.js");
Object.defineProperty(exports, "parseEffect", ({ enumerable: true, get: function () { return parseEffect_2.default; } }));
var parseTimeEffectRecord_1 = __webpack_require__(/*! ./parseTimeEffectRecord */ "./node_modules/@plix-effect/core/dist/parser/parseTimeEffectRecord.js");
Object.defineProperty(exports, "parseTimeEffectRecord", ({ enumerable: true, get: function () { return parseTimeEffectRecord_1.default; } }));
var Timeline_1 = __webpack_require__(/*! ../effects/Timeline */ "./node_modules/@plix-effect/core/dist/effects/Timeline.js");
Object.defineProperty(exports, "TIMELINE_LCM", ({ enumerable: true, get: function () { return Timeline_1.TIMELINE_LCM; } }));
function parseRender(effectData, effectsMapData, filtersMapData, effectConstructorMap, filterConstructorMap, profiles, profileName) {
    var effectsMap = {};
    var filtersMap = {};
    var parsedEffectsNames = new Set();
    var parsedFiltersNames = new Set();
    var profile;
    if (profileName) {
        profile = profiles === null || profiles === void 0 ? void 0 : profiles[profileName];
        if (!profile)
            throw new Error("unknown profile: " + profileName);
    }
    var parserData = {
        getEffectConstructor: function (id) {
            return effectConstructorMap[id];
        },
        getFilterConstructor: function (id) {
            return filterConstructorMap[id];
        },
        parseEffectAlias: function (name) {
            var storedEffect = effectsMap[name];
            if (storedEffect)
                return storedEffect;
            if (parsedEffectsNames.has(name))
                throw new Error("circular effect alias: " + name);
            parsedEffectsNames.add(name);
            var effectData;
            if (name.startsWith("@")) {
                effectData = effectsMapData[name.substring(1)];
            }
            else {
                if (profile && profile.effects)
                    effectData = profile.effects[name];
                if (effectData === undefined)
                    effectData = effectsMapData[name];
            }
            if (effectData === undefined)
                throw new Error("unknown effect alias: " + name);
            var parsedEffect = parseEffect_1.default(effectData, parserData);
            effectsMap[name] = parsedEffect;
            return parsedEffect;
        },
        parseFilterAlias: function (name) {
            var storedFilter = filtersMap[name];
            if (storedFilter)
                return storedFilter;
            if (parsedFiltersNames.has(name))
                throw new Error("circular filter alias: " + name);
            parsedFiltersNames.add(name);
            var filterData;
            if (name.startsWith("@")) {
                filterData = filtersMapData[name.substring(1)];
            }
            else {
                if (profile && profile.filters)
                    filterData = profile.filters[name];
                if (filterData === undefined)
                    filterData = filtersMapData[name];
            }
            if (filterData === undefined)
                throw new Error("unknown filter alias: " + name);
            var parsedFilter = parseFilter_1.default(filterData, parserData);
            filtersMap[name] = parsedFilter;
            return parsedFilter;
        }
    };
    var effect = parseEffect_1.default(effectData, parserData);
    return { effect: effect, effectsMap: effectsMap, filtersMap: filtersMap, profile: profileName !== null && profileName !== void 0 ? profileName : null };
}
exports.default = parseRender;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/parser/parseArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/parser/parseArray.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
function parseArrayOf(parser) {
    return function (jsonDataArray, parserData) {
        return jsonDataArray.map(function (jsonData) {
            return parser(jsonData, parserData);
        });
    };
}
exports.default = parseArrayOf;
//# sourceMappingURL=parseArray.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/parser/parseBlender.js":
/*!********************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/parser/parseBlender.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Blenders = __webpack_require__(/*! color-blend */ "./node_modules/color-blend/dist/index.modern.js");
var parseBlender = function (name) {
    var blender = Blenders[name];
    if (!blender)
        throw new Error("unknown blender " + name);
    return blender;
};
exports.default = parseBlender;
//# sourceMappingURL=parseBlender.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/parser/parseColor.js":
/*!******************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/parser/parseColor.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Color_1 = __webpack_require__(/*! ../Color */ "./node_modules/@plix-effect/core/dist/Color.js");
var parseColor = function (data) {
    return new Color_1.PlixColor(data);
};
exports.default = parseColor;
//# sourceMappingURL=parseColor.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/parser/parseEffect.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/parser/parseEffect.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var utils_1 = __webpack_require__(/*! ../effects/utils */ "./node_modules/@plix-effect/core/dist/effects/utils.js");
var parseFilter_1 = __webpack_require__(/*! ./parseFilter */ "./node_modules/@plix-effect/core/dist/parser/parseFilter.js");
var parseEffect = function (data, parserData) {
    if (data === null)
        return utils_1.EmptyEffect;
    var enabled = data[0], id = data[1], paramsJsonOrAliasName = data[2], filtersJson = data[3];
    var effect;
    if (id === null) { // alias
        effect = parserData.parseEffectAlias(paramsJsonOrAliasName);
    }
    else { // effect constructor
        var effectConstructor = parserData.getEffectConstructor(id);
        if (!effectConstructor)
            throw new Error("unknown effect id: " + id);
        effect = constructEffect(effectConstructor, paramsJsonOrAliasName, parserData);
    }
    if (!filtersJson)
        return enabled ? effect : utils_1.EmptyEffect;
    var filters = filtersJson.map(function (data) { return parseFilter_1.default(data, parserData); });
    var filteredEffect = filters.reduce(function (effect, filter) { return filter(effect); }, effect);
    return enabled ? filteredEffect : utils_1.EmptyEffect;
};
exports.default = parseEffect;
function constructEffect(effectConstructor, jsonParams, parserData) {
    var parsers = effectConstructor.meta.paramParse;
    var params = parseEffectParameters(parsers, jsonParams, parserData);
    return effectConstructor.apply(void 0, params);
}
function parseEffectParameters(parsers, jsonParams, parserData) {
    return parsers.map(function (parser, i) {
        var jsonParam = jsonParams[i];
        return parser(jsonParam, parserData);
    });
}
//# sourceMappingURL=parseEffect.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/parser/parseFilter.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/parser/parseFilter.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var utils_1 = __webpack_require__(/*! ../effects/utils */ "./node_modules/@plix-effect/core/dist/effects/utils.js");
var parseFilter = function (data, parserData) {
    if (!data)
        return utils_1.EmptyFilter;
    var enabled = data[0], id = data[1], paramsOrAliasName = data[2];
    var filter;
    if (id === null) {
        filter = parserData.parseFilterAlias(paramsOrAliasName);
    }
    else {
        var filterConstructor = parserData.getFilterConstructor(id);
        if (!filterConstructor)
            throw new Error("unknown filter id: " + id);
        filter = constructFilter(filterConstructor, paramsOrAliasName, parserData);
    }
    return enabled ? filter : utils_1.EmptyFilter;
};
exports.default = parseFilter;
function constructFilter(filterConstructor, jsonParams, parserData) {
    var parsers = filterConstructor.meta.paramParse;
    var params = parseFilterParameters(parsers, jsonParams, parserData);
    return filterConstructor.apply(void 0, params);
}
function parseFilterParameters(parsers, jsonParams, parserData) {
    return parsers.map(function (parser, i) {
        var jsonParam = jsonParams[i];
        return parser(jsonParam, parserData);
    });
}
//# sourceMappingURL=parseFilter.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/parser/parseGradient.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/parser/parseGradient.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseColor_1 = __webpack_require__(/*! ./parseColor */ "./node_modules/@plix-effect/core/dist/parser/parseColor.js");
var LinearGradient_1 = __webpack_require__(/*! ../gradient/LinearGradient */ "./node_modules/@plix-effect/core/dist/gradient/LinearGradient.js");
var parsePosition = function (data, parserData) {
    var colorPositions = data.map(function (_a) {
        var position = _a[0], colorData = _a[1];
        return ({
            position: position,
            color: parseColor_1.default(colorData, parserData)
        });
    });
    return LinearGradient_1.LinearGradient(colorPositions);
};
exports.default = parsePosition;
//# sourceMappingURL=parseGradient.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/parser/parseNumber.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/parser/parseNumber.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseNumber = function (t) { return +t; };
exports.default = parseNumber;
//# sourceMappingURL=parseNumber.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/parser/parsePosition.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/parser/parsePosition.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parsePosition = function (data, parserData) {
    return data;
};
exports.default = parsePosition;
//# sourceMappingURL=parsePosition.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/parser/parseTimeEffectRecord.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/parser/parseTimeEffectRecord.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var utils_1 = __webpack_require__(/*! ../effects/utils */ "./node_modules/@plix-effect/core/dist/effects/utils.js");
var parseTimeEffectRecord = function (_a, parserData) {
    var enabled = _a[0], name = _a[1], startM = _a[2], endM = _a[3];
    var effect = parserData.parseEffectAlias(name); // parse alias before
    if (!enabled)
        effect = utils_1.EmptyEffect;
    return { startM: startM, endM: endM, effect: effect };
};
exports.default = parseTimeEffectRecord;
//# sourceMappingURL=parseTimeEffectRecord.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/parser/parseTimingFunction.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/parser/parseTimingFunction.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var LinearTimingFunction_1 = __webpack_require__(/*! ../timing/LinearTimingFunction */ "./node_modules/@plix-effect/core/dist/timing/LinearTimingFunction.js");
var ConstTimingFunction_1 = __webpack_require__(/*! ../timing/ConstTimingFunction */ "./node_modules/@plix-effect/core/dist/timing/ConstTimingFunction.js");
var StepTimingFunction_1 = __webpack_require__(/*! ../timing/StepTimingFunction */ "./node_modules/@plix-effect/core/dist/timing/StepTimingFunction.js");
var BezierEasingTimingFunction_1 = __webpack_require__(/*! ../timing/BezierEasingTimingFunction */ "./node_modules/@plix-effect/core/dist/timing/BezierEasingTimingFunction.js");
var TFConstructors = {
    "linear": LinearTimingFunction_1.LinearTimingFunction,
    "step": StepTimingFunction_1.StepTimingFunction,
    "bezier": BezierEasingTimingFunction_1.BezierEasingTimingFunction
};
var linear1 = function (t) { return t; };
var parseTimingFunction = function (data) {
    if (data === null)
        return linear1;
    if (typeof data === "number")
        return ConstTimingFunction_1.ConstTimingFunction(data);
    var type = data[0], args = data.slice(1);
    var TFConstructor = TFConstructors[type];
    return TFConstructor.apply(void 0, args);
};
exports.default = parseTimingFunction;
//# sourceMappingURL=parseTimingFunction.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/parser/parseTypes.js":
/*!******************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/parser/parseTypes.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var parseArray_1 = __webpack_require__(/*! ./parseArray */ "./node_modules/@plix-effect/core/dist/parser/parseArray.js");
Object.defineProperty(exports, "ARRAY_OF", ({ enumerable: true, get: function () { return parseArray_1.default; } }));
var parseBlender_1 = __webpack_require__(/*! ./parseBlender */ "./node_modules/@plix-effect/core/dist/parser/parseBlender.js");
Object.defineProperty(exports, "BLENDER", ({ enumerable: true, get: function () { return parseBlender_1.default; } }));
var parseColor_1 = __webpack_require__(/*! ./parseColor */ "./node_modules/@plix-effect/core/dist/parser/parseColor.js");
Object.defineProperty(exports, "COLOR", ({ enumerable: true, get: function () { return parseColor_1.default; } }));
var parseEffect_1 = __webpack_require__(/*! ./parseEffect */ "./node_modules/@plix-effect/core/dist/parser/parseEffect.js");
Object.defineProperty(exports, "EFFECT", ({ enumerable: true, get: function () { return parseEffect_1.default; } }));
var parseFilter_1 = __webpack_require__(/*! ./parseFilter */ "./node_modules/@plix-effect/core/dist/parser/parseFilter.js");
Object.defineProperty(exports, "FILTER", ({ enumerable: true, get: function () { return parseFilter_1.default; } }));
var parseGradient_1 = __webpack_require__(/*! ./parseGradient */ "./node_modules/@plix-effect/core/dist/parser/parseGradient.js");
Object.defineProperty(exports, "GRADIENT", ({ enumerable: true, get: function () { return parseGradient_1.default; } }));
var parseNumber_1 = __webpack_require__(/*! ./parseNumber */ "./node_modules/@plix-effect/core/dist/parser/parseNumber.js");
Object.defineProperty(exports, "NUMBER", ({ enumerable: true, get: function () { return parseNumber_1.default; } }));
var parsePosition_1 = __webpack_require__(/*! ./parsePosition */ "./node_modules/@plix-effect/core/dist/parser/parsePosition.js");
Object.defineProperty(exports, "POSITION", ({ enumerable: true, get: function () { return parsePosition_1.default; } }));
var parseTimeEffectRecord_1 = __webpack_require__(/*! ./parseTimeEffectRecord */ "./node_modules/@plix-effect/core/dist/parser/parseTimeEffectRecord.js");
Object.defineProperty(exports, "TIME_EFFECT_RECORD", ({ enumerable: true, get: function () { return parseTimeEffectRecord_1.default; } }));
var parseTimingFunction_1 = __webpack_require__(/*! ./parseTimingFunction */ "./node_modules/@plix-effect/core/dist/parser/parseTimingFunction.js");
Object.defineProperty(exports, "TIMING_FUNCTION", ({ enumerable: true, get: function () { return parseTimingFunction_1.default; } }));
//# sourceMappingURL=parseTypes.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/timing/BezierEasingTimingFunction.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/timing/BezierEasingTimingFunction.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BezierEasingTimingFunction = void 0;
var BezierEasing = __webpack_require__(/*! bezier-easing */ "./node_modules/bezier-easing/src/index.js");
function BezierEasingTimingFunction(ax, ay, bx, by, from, to) {
    if (from === void 0) { from = 0; }
    if (to === void 0) { to = 1; }
    var easing = BezierEasing(ax, ay, bx, by);
    var dif = to - from;
    return function (t) { return from + dif * easing(t); };
}
exports.BezierEasingTimingFunction = BezierEasingTimingFunction;
//# sourceMappingURL=BezierEasingTimingFunction.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/timing/ConstTimingFunction.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/timing/ConstTimingFunction.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConstTimingFunction = void 0;
function ConstTimingFunction(value) {
    return function () { return value; };
}
exports.ConstTimingFunction = ConstTimingFunction;
//# sourceMappingURL=ConstTimingFunction.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/timing/LinearTimingFunction.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/timing/LinearTimingFunction.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LinearTimingFunction = void 0;
function LinearTimingFunction(from, to) {
    if (from === void 0) { from = 0; }
    if (to === void 0) { to = 1; }
    var dif = to - from;
    return function (t) { return from + t * dif; };
}
exports.LinearTimingFunction = LinearTimingFunction;
//# sourceMappingURL=LinearTimingFunction.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/timing/StepTimingFunction.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/timing/StepTimingFunction.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StepTimingFunction = void 0;
function StepTimingFunction(steps, from, to) {
    if (from === void 0) { from = 0; }
    if (to === void 0) { to = 1; }
    var dif = to - from;
    return function (n) { return from + Math.floor(n * steps) / steps * dif; };
}
exports.StepTimingFunction = StepTimingFunction;
//# sourceMappingURL=StepTimingFunction.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/util/limit.js":
/*!***********************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/util/limit.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
function limit(from, value, to) {
    if (value < from)
        return from;
    if (value > to)
        return to;
    return value;
}
exports.default = limit;
//# sourceMappingURL=limit.js.map

/***/ }),

/***/ "./node_modules/@plix-effect/core/dist/util/posMod.js":
/*!************************************************************!*\
  !*** ./node_modules/@plix-effect/core/dist/util/posMod.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
function posMod(value, mod) {
    return ((value % mod) + mod) % mod;
}
exports.default = posMod;
//# sourceMappingURL=posMod.js.map

/***/ }),

/***/ "./node_modules/bezier-easing/src/index.js":
/*!*************************************************!*\
  !*** ./node_modules/bezier-easing/src/index.js ***!
  \*************************************************/
/***/ ((module) => {

/**
 * https://github.com/gre/bezier-easing
 * BezierEasing - use bezier curve for transition easing function
 * by Gaëtan Renaudeau 2014 - 2015 – MIT License
 */

// These values are established by empiricism with tests (tradeoff: performance VS precision)
var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;

var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

var float32ArraySupported = typeof Float32Array === 'function';

function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }
function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }
function C (aA1)      { return 3.0 * aA1; }

// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
function calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }

// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
function getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }

function binarySubdivide (aX, aA, aB, mX1, mX2) {
  var currentX, currentT, i = 0;
  do {
    currentT = aA + (aB - aA) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0.0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}

function newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {
 for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
   var currentSlope = getSlope(aGuessT, mX1, mX2);
   if (currentSlope === 0.0) {
     return aGuessT;
   }
   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
   aGuessT -= currentX / currentSlope;
 }
 return aGuessT;
}

function LinearEasing (x) {
  return x;
}

module.exports = function bezier (mX1, mY1, mX2, mY2) {
  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
    throw new Error('bezier x values must be in [0, 1] range');
  }

  if (mX1 === mY1 && mX2 === mY2) {
    return LinearEasing;
  }

  // Precompute samples table
  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  for (var i = 0; i < kSplineTableSize; ++i) {
    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
  }

  function getTForX (aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;

    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;

    // Interpolate to provide an initial guess for t
    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;

    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }

  return function BezierEasing (x) {
    // Because JavaScript number are imprecise, we should guarantee the extremes are right.
    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
};


/***/ }),

/***/ "./node_modules/color-blend/dist/index.modern.js":
/*!*******************************************************!*\
  !*** ./node_modules/color-blend/dist/index.modern.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "color": () => /* binding */ R,
/* harmony export */   "colorBurn": () => /* binding */ G,
/* harmony export */   "colorDodge": () => /* binding */ F,
/* harmony export */   "darken": () => /* binding */ C,
/* harmony export */   "difference": () => /* binding */ K,
/* harmony export */   "exclusion": () => /* binding */ N,
/* harmony export */   "hardLight": () => /* binding */ H,
/* harmony export */   "hue": () => /* binding */ P,
/* harmony export */   "lighten": () => /* binding */ E,
/* harmony export */   "luminosity": () => /* binding */ S,
/* harmony export */   "multiply": () => /* binding */ j,
/* harmony export */   "normal": () => /* binding */ D,
/* harmony export */   "overlay": () => /* binding */ A,
/* harmony export */   "saturation": () => /* binding */ Q,
/* harmony export */   "screen": () => /* binding */ z,
/* harmony export */   "softLight": () => /* binding */ J
/* harmony export */ });
function n(n,r,t){return{r:255*t(n.r/255,r.r/255),g:255*t(n.g/255,r.g/255),b:255*t(n.b/255,r.b/255)}}function r(n,r){return r}function t(n,r){return n*r}function u(n,r){return n+r-n*r}function o(n,r){return f(r,n)}function i(n,r){return Math.min(n,r)}function a(n,r){return Math.min(Math.max(n,r),1)}function e(n,r){return 0===n?0:1===r?1:Math.min(1,n/(1-r))}function c(n,r){return 1===n?1:0===r?0:1-Math.min(1,(1-n)/r)}function f(n,r){return r<=.5?t(n,2*r):u(n,2*r-1)}function g(n,r){return r<=.5?n-(1-2*r)*n*(1-n):n+(2*r-1)*((n<=.25?((16*n-12)*n+4)*n:Math.sqrt(n))-n)}function b(n,r){return Math.abs(n-r)}function s(n,r){return n+r-2*n*r}function h(n,r,t){return Math.min(Math.max(n,r),t)}function M(n){return{r:h(n.r,0,255),g:h(n.g,0,255),b:h(n.b,0,255),a:h(n.a,0,1)}}function m(n){return{r:255*n.r,g:255*n.g,b:255*n.b,a:n.a}}function d(n){return{r:n.r/255,g:n.g/255,b:n.b/255,a:n.a}}function l(n,r){void 0===r&&(r=0);var t=Math.pow(10,r);return{r:Math.round(n.r*t)/t,g:Math.round(n.g*t)/t,b:Math.round(n.b*t)/t,a:n.a}}function p(n,r,t,u,o,i){return(1-r/t)*u+r/t*Math.round((1-n)*o+n*i)}function v(n,r,t,u,o){void 0===o&&(o={unitInput:!1,unitOutput:!1,roundOutput:!0}),o.unitInput&&(n=m(n),r=m(r)),n=M(n);var i=(r=M(r)).a+n.a-r.a*n.a,a=t(n,r,u),e=M({r:p(n.a,r.a,i,n.r,r.r,a.r),g:p(n.a,r.a,i,n.g,r.g,a.g),b:p(n.a,r.a,i,n.b,r.b,a.b),a:i});return o.unitOutput?d(e):o.roundOutput?l(e):function(n){return l(n,9)}(e)}function x(n,r,t){return m(t(d(n),d(r)))}function O(n){return.3*n.r+.59*n.g+.11*n.b}function y(n,r){var t=r-O(n);return function(n){var r=O(n),t=n.r,u=n.g,o=n.b,i=Math.min(t,u,o),a=Math.max(t,u,o);function e(n){return r+(n-r)*r/(r-i)}function c(n){return r+(n-r)*(1-r)/(a-r)}return i<0&&(t=e(t),u=e(u),o=e(o)),a>1&&(t=c(t),u=c(u),o=c(o)),{r:t,g:u,b:o}}({r:n.r+t,g:n.g+t,b:n.b+t})}function I(n){return Math.max(n.r,n.g,n.b)-Math.min(n.r,n.g,n.b)}function L(n,r){var t=["r","g","b"].sort(function(r,t){return n[r]-n[t]}),u=t[0],o=t[1],i=t[2],a={r:n.r,g:n.g,b:n.b};return a[i]>a[u]?(a[o]=(a[o]-a[u])*r/(a[i]-a[u]),a[i]=r):a[o]=a[i]=0,a[u]=0,a}function k(n,r){return y(L(r,I(n)),O(n))}function q(n,r){return y(L(n,I(r)),O(n))}function w(n,r){return y(r,O(n))}function B(n,r){return y(n,O(r))}function D(t,u){return v(t,u,n,r)}function j(r,u){return v(r,u,n,t)}function z(r,t){return v(r,t,n,u)}function A(r,t){return v(r,t,n,o)}function C(r,t){return v(r,t,n,i)}function E(r,t){return v(r,t,n,a)}function F(r,t){return v(r,t,n,e)}function G(r,t){return v(r,t,n,c)}function H(r,t){return v(r,t,n,f)}function J(r,t){return v(r,t,n,g)}function K(r,t){return v(r,t,n,b)}function N(r,t){return v(r,t,n,s)}function P(n,r){return v(n,r,x,k)}function Q(n,r){return v(n,r,x,q)}function R(n,r){return v(n,r,x,w)}function S(n,r){return v(n,r,x,B)}
//# sourceMappingURL=index.modern.js.map


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_plix-effect_core_dist_effects_index_js-node_modules_plix-effect_core_dis-eb2327.js.map